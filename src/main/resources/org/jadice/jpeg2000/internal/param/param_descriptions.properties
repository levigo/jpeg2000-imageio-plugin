#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

SIZ.L = "Length of marker segment in bytes (not including the marker). The value of this parameter is determined by the following equation: Lsiz = 38 + 3 * Csiz";
SIZ.R = "Denotes capabilities that a decoder needs to properly decode the codestream.";
SIZ.X = "Width of the reference grid.";
SIZ.Y = "Height of the reference grid.";
SIZ.XO = "Horizontal offset from the origin of the reference grid to the left side of the image area.";
SIZ.YO = "Vertical offset from the origin of the reference grid to the top side of the image area.";
SIZ.XT = "Width of one reference tile with respect to the reference grid.";
SIZ.YT = "Height of one reference tile with respect to the reference grid.";
SIZ.XTO = "Horizontal offset from the origin of the reference grid to the left side of the first tile.";
SIZ.YTO = "Vertical offset from the origin of the reference grid to the top side of the first tile.";
SIZ.C = "Number of components in the image.";
SIZ.S = "Signals two information: if component sample value are signed or unsigned and the component sample bit depth = value + 1. From 1 bit deep through 38 bits deep respectively (counting the sign bit, if appropriate)a), RI. Precision (depth) in bits and sign of the ith component samples. The precision is the precision of the component samples before DC level shifting is performed (i.e., the precision of the original component samples before any processing is performed).";
SIZ.XR = "Horizontal separation of a sample of ith component with respect to the reference grid. There is one occurrence of this parameter for each component.";
SIZ.YR = "Vertical separation of a sample of ith component with respect to the reference grid. There is one occurrence of this parameter for each component.";
TLM.Z = "Index of this marker segment relative to all other TLM marker segments present in the current header. The sequence of (Ttlmi, Ptlmi) pairs from this marker segment is concatenated, in order of increasing Ztlm, with the sequences of pairs from other marker segments. The jth entry in the resulting list contains the tile index and tile-part length pair for the jth tile-part appearing in the codestream.";
TLM.L = "Length of marker segment in bytes (not including the marker). The value of this parameter is determined by equation (A-7)";
TLM.S = "Size of the Ttlm and Ptlm parameters";
TLM.T = "Tile index of the ith tile-part. Either none or one value for every tile-part. The number of tile-parts in each tile can be derived from this marker segment (or the concatenated list of all such markers) or from a non-zero TNsot parameter, if present.";
TLM.P = "Length, in bytes, from the beginning of the SOT marker of the ith tile-part to the end of the bit stream data for that tile-part. One value for every tile-part.";
COM.L = "Length of marker segment in bytes (not including the marker).";
COM.R = "Registration value of the marker segment.";
COM.C = "Byte of unstructured data.";
COD.L = "Length of marker segment in bytes (not including the marker). The value of this parameter isdetermined by the following equation: if user-defined_precincts: Lcod = 13 + number_decomposition_levels, if maximum_precincts: Lcod = 12; where maximum_precincts and user-defined_precincts are indicated in the Scod parameter and number_decomposition_levels are indicated in the SPcod parameter.";
COD.S = "Coding style for all components. Table A.13 shows the value for the Scod parameter.";
COD.SG.order = "Progression order (independent of components)";
COD.SG.layers = "Number of layers (independent of components)";
COD.SG.mct = "Multiple component transformation usage (independent of components)";
COD.SP.NL = "Number of decomposition levels, NL, Zero implies no transformation (related to all components)";
COD.SP.xcb = "Code-block width exponent offset value, xcb (related to all components)";
COD.SP.ycb = "Code-block width exponent offset value, ycb (related to all components)";
COD.SP.modes = "Style of the code-block coding passes (related to all components)";
COD.SP.kernel = "Wavelet transformation used (related to all components)";
COD.SP.sso = "Single sample overlap parameters (extension from ITU-T.801)";
COD.SP.precincts = "If Scod or Scoc = xxxx xxx0, this parameter is not present; otherwise this indicates precinct width and height. The first parameter (8 bits) corresponds to the N(L) LL sub-band. Each successive parameter corresponds to each successive resolution level in order.";
COC.L = "Length of marker segment in bytes (not including the marker). The value of this parameter is determined by equation (A-3).";
COC.C = "The index of the component to which this marker segment relates. The components are indexed 0, 1,2, etc.";
COC.S = "Coding style for this component. Table A.23 shows the value for each Scoc parameter";
COC.SP.NL = "Number of decomposition levels, NL, Zero implies no transformation (related to all components)";
COC.SP.xcb = "Code-block width exponent offset value, xcb (related to all components)";
COC.SP.ycb = "Code-block width exponent offset value, ycb (related to all components)";
COC.SP.modes = "Style of the code-block coding passes (related to all components)";
COC.SP.kernel = "Wavelet transformation used (related to all components)";
COC.SP.sso = "Single sample overlap parameters (extension from ITU-T.801)";
COC.SP.precincts = "If Scod or Scoc = xxxx xxx0, this parameter is not present; otherwise this indicates precinct width and height. The first parameter (8 bits) corresponds to the N(L) LL sub-band. Each successive parameter corresponds to each successive resolution level in order.";
QCD.L = "Length of marker segment in bytes (not including the marker). The value of this parameter is determined by equation (A-4)";
QCC.L = "Length of marker segment in bytes (not including the marker). The value of this parameter is determined by equation (A-5)";
QPx.L = "Length of marker segment in bytes (not including the marker).";
QPx.PL = "The resolution level index for the quantization values signalled. Equation A-9 shows how this marker segment is constructed based on the resolution level index, lev, as well as the precinct index, prec.";
QPx.PP = "The precinct index for the quantization values signalled. The size of this marker segment parameter will be one byte when the PLqpd parameter is less than 128, but two bytes when PLqpd is greater than or equal to 128. This parameter will then just hold the precinct index, prec. The precinct index, prec, can range from 0 to numprecincts –1, where numprecincts is the number of precincts at resolution level lev and is also defined in ITU-T.800 , B.6.";
QPx.S.style = "Quantization step size value for the ith sub-band at the resolution level, lev, in the order defined for lev in F.2.4. The number of parameters is at least as large as the number of sub-bands in the tilecomponent with the greatest number of sub-bands at resolution level, lev.";
QxD.S.style = "Quantization style for all components.";
QxC.C = "The index of the component to which this marker segment relates. The components are indexed 0, 1, 2, etc. (either 8 or 16 bits depending on Csiz value).";
QxC.S.style = "Quantization style.";
Qxx.SP.exp0 = "Exponent, eb, of the reversible dynamic range signalled for each sub-band (see Equation (E-5))";
Qxx.SP.exp = "Exponent, eb, of the quantization step size value (see Equation (E-3))";
Qxx.SP.man = "Mantissa, µb, of the quantization step size value (see Equation (E-3))";
Qxx.SP.deadzone = "Variable deadzone, num_nzb, value –32 768 to 32 767 (see Equation (C-1) in ITU-T.801)";
Qxx.S.guardbits = "Number of guard bits: 0 to 7";
DCO.L = "Length of the marker segment in bytes (not including the marker).";
DCO.S = "Variable DC offset type definition";
DCO.SP = "Variable DC offset for the ith component. The is one SPdco parameter for every component in the image.";
POC.L = "Length of marker segment in bytes (not including the marker). The value of this parameter is determined by equation (A6)";
POC.RS = "Resolution level index (inclusive) for the start of a progression. One value for each progression change in this tile or tile-part. The number of progression changes can be derived from the length of the marker segment.";
POC.CS = "Component index (inclusive) for the start of a progression. The components are indexed 0, 1, 2, etc. (either 8 or 16 bits depending on Csiz value). One value for each progression change in this tile or tile-part. The number of progression changes can be derived from the length of the marker segment.";
POC.LYE = "Layer index (exclusive) for the end of a progression. The layer index always starts at zero for every progression. Packets that have already been included in the codestream are not included again. One value for each progression change in this tile or tile-part. The number of progression changes can be derived from the length of the marker segment.";
POC.RE = "Resolution Level index (exclusive) for the end of a progression. One value for each progression change in this tile or tile-part. The number of progression changes can be derived from the length of the marker segment.";
POC.CE = "Component index (exclusive) for the end of a progression. The components are indexed 0, 1, 2, etc. (either 8 or 16 bits depending on Csiz value). One value for each progression change in this tile or tile-part. The number of progression changes can be derived from the length of the marker segment.";
POC.P = "Progression order. One value for each progression change in this tile or tile-part. The number of progression changes can be derived from the length of the marker segment.";
ADS.L = "Length of marker segment in bytes (not including the marker).";
ADS.S = "The index of this ADS marker segment. This marker segment is associated with a component via the parameter in the COD or COC marker segments found in that tile-part header.";
ADS.IO = "Number of elements in the string defining the number of decomposition sub-levels.";
ADS.DO = "String defining the number of decomposition sub-levels. The two bit elements are packed into bytes in big endian order. The final byte is padded to a byte boundary.";
ADS.IS = "Number of elements in the string defining the arbitrary decomposition structure.";
ADS.DS = "String defining the arbitrary decomposition structure. The two bit elements are packed into bytes in big endian order. The final byte is padded to a byte boundary.";
ATK.A = "The kth lifting coefficient for the lifting step s, αs,k. The index, s, ranges from s = 0 to Natk – 1. The index, k, ranges from k = 0 to LCatk – 1.";
ATK.L = "Length of marker segment in bytes (not including the marker).";
ATK.S = "Several coded information. See ITU-T.801, A.3.5 for details.";
ATK.K = "The scaling factor, K. Present for irreversible transformation only, WT_Typ = IRR";
ATK.N = "Number of lifting steps, NLS";
ATK.O = "Offset for lifting step s, offs. The index, s, ranges from s = 0 to Natk – 1. Present only if Filt_Cat = ARB.";
ATK.E = "The base two scaling exponent for lifting step s, εs. Present only with reversible transformation, WT_Typ = REV. The index, s, ranges from s = 0 to Natk – 1.";
ATK.B = "Additive residue for lifting step, s. Present for reversible transformations (WT_Typ = REV) only. The index, s, ranges from s = 0 to Natk – 1.";
ATK.LC = "Number of lifting coefficients signalled for lifting step s. Provides the range, k, for Aatksk. The index, s, ranges from s = 0 to Natk – 1.";
CBD.L = "Length of marker segment in bytes (not including the marker).";
CBD.N = "Number of component bit depths included in marker segment. Table A.30 shows the value for the Ncbd parameter.";
CBD.BD = "Bit depth and sign of the reconstructed image components in the order in which they are created as determined by the MCC and MCO marker segments. Either one value is signalled for all components (see Table A.30) or an individual bit depth is given for each component.";
CRG.L = "Length of marker segment in bytes (not including the marker).";
CRG.X = "Value of the horizontal offset, in units of 1/65536 of the horizontal separation XRsizi, for the ith component. Thus, values range from 0/65536 (sample occupies its reference grid point) to XRsizc(65535/65536) (just before the next sample's reference grid point). This value is repeated for every component.";
CRG.Y = "Value of the vertical offset, in units of 1/65536 of the vertical separation YRsizi, for the ith component. Thus, values range from 0/65536 (sample occupies its reference grid point) to YRsizc(65535/65536) (just before the next sample's reference grid point). This value is repeated for every component.";
DFS.L = "Length of marker segment in bytes (not including the marker).";
DFS.S = "The index of this DFS marker segment. This marker segment is associated with a component via the parameter in the COD or COC marker segments found in the main header.";
DFS.I = "Number of elements in the string defining the number of decomposition sub-levels.";
DFS.D = "String defining the number of decomposition sub-levels. The two bit elements are packed into bytes in big endian order. The final byte is padded to a byte boundary.";
SOP.L = "Length of marker segment in bytes, not including the marker.";
SOP.N = "Packet sequence number. The first packet in a coded tile is assigned the value zero. For every successive packet in this coded tile this number is incremented by one. When the maximum number is reached, the number rolls over to zero.";
MCO.L = "Length of marker segment in bytes (not including the marker). The length is given by the following expression: Lmco = 3 + Nmco";
MCO.N = "Number of multiple component transform stages specified for inverse transform processing. If Nmco = 0, then no multiple component transform processing is used for the current tile and no Imcoi parameters shall appear. Otherwise, Nmco specifies the number of MCC marker segment identifiers that will follow.";
MCO.I = "Index of the MCC marker segment containing the component collection information for the ith inverse multiple component transform stage (see A.3.8).";
MCC.L = "Length of marker segment in bytes (not including the marker).";
MCC.Z = "Index of this marker segment in a series of MCC marker segments. All the marker segments in the series have the same Imcc parameter value present in this header. The data in each subsequent MCC marker segment shall be appended, in order, to make one stream of the other parameters. The Ymcc and Qmcc parameter appears only in the first marker segment (Zmcc = 0).";
MCC.I = "Index of this marker segment. An MCC marker segment, or series, with a given Imcc value in the tile-part header overrides a main header MCC marker segment, or series, with the same Imcc value.";
MCC.Y = "Index of the last number of MCC marker segment in the series. For every series of MCC marker segments (i.e., MCC marker segments in this header with the same Imcc parameter value), there shall be MCC marker segment with Zmcc parameter values of 0 to Ymcc. The last MCC marker segment will have Zmcc = Ymcc. This value is present only in the first marker segment in the series (Zmcc = 0).";
MCC.Q = "The number of collections in the MCC marker segment. This value is present only in the first marker segment in the series (Zmcc = 0).";
MCC.X = "Indicates type of multiple component transform used for the ith component collection (wavelet or array-based decorrelation or array-based dependency). Defines the interpretation applied to Tmcc.";
MCC.N = "Indicates the number of input components for the ith component collection and defines the number of bits (8 or 16) used to represent the component indices in ith collection.";
MCC.C = "Input intermediate component indices included the ith component collection. The number of indices in the ith component collection is Nmcci. Each index denotes an input intermediate component. The order of the indices defines the ordering applied to the input intermediate components prior to application of the inverse transform.";
MCC.M = "Indicates the number of output intermediate components for the ith component collection and defines the number of bits (8 or 16) used to represent the component indices in ith collection. If anything other than an array-based irreversible decorrelation transform is used, Mmcci must equal Nmcci.";
MCC.W = "Intermediate component indices included the ith output component collection. The number of indices in the ith component collection is Mmcci. All output intermediate component indices in a given MCC marker segment shall appear only once across all collections in that MCC marker.";
MCC.T = "For array-based component collection transforms, Tmcci assigns arrays defined in an MCT marker segment to the ith component collection. An MCT marker segment with the right type and index in the first tile-part header of a tile is used before an MCT marker segment with the right type and index in the main header. Tmcci also indicates the reversibility of array-based component transforms. For wavelet-based component collection transforms, Tmcci assigns a wavelet kernel defined in ITU-T800, Annex A or an ATK marker segment and the number of wavelet decomposition levels for the ith component collection (only the dyadic decomposition of ITU-T.800 is supported). An ATK marker segment with the proper index in the first tile-part header of a tile is used before an ATK marker segment with the proper index in the main header. Tmcci also contains the index of an MCT marker segment that contains component additive offsets.";
MCC.O = "Present in the MCC marker segment only for those component collections that use a wavelet-based transform. Omcci indicates the reference grid offset to apply in the component dimension for the ith component collection (see ITU-T.800, J.2.2).";
VMS.L = "Length of marker segment in bytes (not including the marker). Fixed at 7 bytes.";
VMS.C = "The index of the component to which this marker segment applies. Could be all components.";
VMS.S = "Minimal resolution level and respect block boundaries flag.";
VMS.W = "Window width variable, win_width (see ITU-T.801, E.6).";
VMS.R = "Bits retained variable, bits_retained (see ITU-T.801, E.6).";
VMS.A = "Value of the numerator of the α parameter, α = Avms/128 (see ITU-T.801, E.6).";
VMS.B = "Value of the numerator of the β parameter, β = Bvms/128 (see ITU-T.801, E.6).";
MCT.L = "Length of marker segment in bytes (not including the marker).";
MCT.Z = "Index of this marker segment in a series of MCT marker segments. All the marker segments in the series have the same Imct parameter value present in this header. The data in each subsequent MCT marker segment shall be appended, in order, to make on stream of SPmcti parameter values. The Ymct parameter values are present only in the first marker segment in the series (Zmct = 0).";
MCT.I = "Multiple component transformation index value, array type, and parameter size. An MCT marker segment, or series, with a given Imct value in the tile-part header overrides a main header MCT marker segment, or series, with the same Imct value.";
MCT.Y = "Index of the last number of MCT marker segment in the series. For every series of MCT marker segments (i.e., MCT marker segments in this header with the same Imct parameter value), there shall be MCT marker segment with Zmct parameter values of 0 to Ymct. The last MCT marker segment will have Zmct = Ymct. This value is present only in the first marker segment in the series (Zmct = 0).";
MCT.SP = "Parameters for the multiple component transformation definition. One parameter value for each element in the array. See J.2 to determine the number of array elements and their order in the marker segment. The number of elements in a row and the number of rows (elements in a column) are determined by the type of array and the number of the input and output components to which it is assigned.";
RGN.L = "Length of marker segment in bytes (not including the marker).";
RGN.C = "The index of the component to which this marker segment relates. The components are indexed 0, 1, 2, etc.";
RGN.S = "ROI style for the current ROI. Table A.25 shows the value for the Srgn parameter.";
RGN.SP = "Parameter for ROI style designated in Srgn. Binary shifting of ROI coefficients above the background.";
RGN.XA = "Horizontal reference grid point from the origin of the first point. (In case of elliptic region of interesst, Srgn=2, this value shall not exceed the width of the image.)";
RGN.YA = "Vertical reference grid point from the origin of the first point. (In case of elliptic region of interesst, Srgn=2, this value shall not exceed the height of the image.)";
RGN.XB = "Horizontal reference grid point from the origin of the second point.";
RGN.YB = "Vertical reference grid point from the origin of the second point.";
SOT.L = "Length of marker segment in bytes (not including the marker).";
SOT.I = "Tile index. This number refers to the tiles in raster order starting at the number 0.";
SOT.P = "Length, in bytes, from the beginning of the first byte of this SOT marker segment of the tile-part to the end of the data of that tile-part. Figure A.16 shows this alignment. Only the last tile-part in the codestream may contain a 0 for Psot. If the Psot is 0, this tile-part is assumed to contain all data until the EOC marker.";
SOT.TP = "Tile-part index. There is a specific order required for decoding tile-parts; this index denotes the order from 0. If there is only one tile-part for a tile, then this value is zero. The tile-parts of this tile shall appear in the codestream in this order, although not necessarily consecutively.";
SOT.TN = "Number of tile-parts of a tile in the codestream. Two values are allowed: the correct number of tileparts for that tile and zero. A zero value indicates that the number of tile-parts of this tile is not specified in this tile-part.";
PLM.L = "Length of marker segment in bytes (not including the marker).";
PLM.Z = "Index of this marker segment relative to all other PLM marker segments present in the current header. The sequence of (Nplmi, Iplmi) parameters from this marker segment is concatenated, in order of increasing Zplm, with the sequences of parameters from other marker segments. The kth entry in the resulting list contains the number of bytes and packet header pair for the kth tile-part appearing in the codestream. Every marker segment in this series shall end with a completed packet header length. However, the series of Iplm parameters described by the Nplm does not have to be complete in a given marker segment. Therefore, it is possible that the next PLM marker segment will not have a Nplm parameter after Zplm, but the continuation of the Iplm series from the last PLM marker segment.";
NLT.L = "Length of marker segment in bytes (not including the marker).";
NLT.C = "The index of the component to which this marker segment relates. The components are indexed 0, 1, 2, etc. If this value is 65 535, then this marker segment applies to all components. Table A.42 shows the value for the Cnlt parameter.";
NLT.BD = "Bit depth and sign of the decoded image component, Zi, after processing of the ith reconstructed image component by the non-linearity. If Cnlt = 65 535, then this value applies to all components. Table A.43 shows the values for the BDnlt parameter.";
NLT.T = "Non-linearity type. Table A.44 shows the value for the Scod parameter.";
NLT.ST.E = "Non-linearity exponent (8-bit integer + 16-bit fraction)";
NLT.ST.S = "Non-linearity toe slope (8-bit integer + 16-bit fraction)";
NLT.ST.T = "Non-linearity threshold (8-bit integer + 16-bit fraction)";
NLT.ST.A = "Non-linearity continuity parameter A (8-bit integer + 16-bit fraction)";
NLT.ST.B = "Non-linearity continuity parameter B (8-bit integer + 16-bit fraction)";
NLT.ST.Npoints = "(Number of points – 1) in the LUT-style non-linearity definition (all other values reserved)";
NLT.ST.Dmin = "Dmin = parameter value / (232–1)";
NLT.ST.Dmax = "Dmax = parameter value / (232–1)";
NLT.ST.PTval = "Precision of Tvalue parameter in bits (1-32). This also implies how many bytes are used to express the Tvalue (all other values reserved)";
NLT.ST.Tvalue = "Run of table values for the LUT-style non-linearity. The (Npoints + 1) parameters are unsigned integers. The actual value of Tvalue is Tvalue = parameter value / (2PTval – 1)";